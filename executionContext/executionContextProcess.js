// 실행 컨텍스트 실행 과정
var base = 200;
function getPoint(bonus) {
  var point = 100;
  return point + base + bonus;
};
console.log(getPoint(70));

/*
1.함수 선언문 getPoint function 오브젝트 생성, 
  getPoint 오브젝트의 내부 property인 Scope에 글로벌 오브젝트 생성
2.base 변수에 undefined 할당
3.base 변수에 200 값 할당
4.맨 마지막 줄의 getPoint 함수 호출, 파라미터 값 70 으로 넘겨줌
  엔진이 실행 컨텍스트를 생성


// 준비 단계(실행 컨텍스트)
1.컴포넌트를 생성해 실행 컨텍스트에 첨부
  (렉시컬, 변수, this 바인딩 컴포넌트 오브젝트를 생성해 첨부)
2.환경 레코드, 외부 렉시컬 환경 참조를 생성해 렉시컬 환경 컴포넌트에 첨부
  외부 렉시컬 환경 참조에 getPoint function 오브젝트에 설정되었던 Scope를 참조

// 초기화 단계
1.호출한 함수의 파라미터 값을 호출된 함수의 파라미터 이름에 매핑. (70을 bonus에 매핑)
  point 변수에 undefined 할당
  환경 레코드에 작성

여기까지는 온전히 엔진의 내부처리이므로 외부에서 실행 상태를 변경하거나 사용할 수 없음

// 코드 실행 단계
1.변수 point에 100 값 할당
  환경 레코드 안의 변수 point의 값도 100으로 변경됨

이제 실행 컨텍스트와 관련된 함수와 변수 사용 가능

2.return 문을 만나서 표현식을 처리함
  point 변수 식별자 해결 - 환경 레코드에서 가져옴
  base 변수 - 외부 렉시컬 환경 참조에서 가져옴 (함수 밖에 있는 것도 컨텍스트 개념으로 가져올 수 있음)
  bonus 파라미터 - 환경 레코드에서 가져옴


// 실행 결과
370
*/